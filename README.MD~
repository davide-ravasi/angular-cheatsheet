# ROUTING
## In 

	import { RouterModule, Routes } from '@angular/router';

	const appRoutes: Routes = [
	  { path: '', component: HomeComponent },
	  { path: 'users', component: UsersComponent , children: [
		{ path: ':id/:name', component: UserComponent }
	   ] },
	  { path: 'servers', component: ServersComponent , children: [
	      { path: ':id', component: ServerComponent },
	      { path: ':id/edit', component: EditServerComponent } 
	  ]},
	 { path: '',
	    redirectTo: '/heroes',
	    pathMatch: 'full'
	  },
	  { path: '**', component: PageNotFoundComponent }
	];

## imports:


	RouterModule.forRoot(
		appRoutes,
		{ enableTracing: true } // <-- debugging purposes only
	)


## to load component:

	<router-outlet></router-outlet>



## in tag link html


	<a [routerLink]="['/']" routerLinkActive="active" [routerLinkActiveOptions]="{exact: true}">Home</a>
	<a [routerLink]="['/about']" routerLinkActive="active">About</a>

	      <a
		[routerLink]="['/servers', server.id]"
		[queryParams]="{allowEdit: true}" 
		fragment="loading"
		class="list-group-item"
		*ngFor="let server of servers">


## in javascript


	import { ActivatedRoute, Params } from '@angular/router';

	constructor(private route: ActivatedRoute) { }

	this.router.navigate(['/servers',id,'edit']);

	this._router.navigate(['detail'], { queryParams: { pageNum: this.pageNum + 1 }, relativeTo: this._Activatedroute } 	);


[https://www.tektutorialshub.com/angular/angular-navigating-between-routes/](https://www.tektutorialshub.com/angular/angular-navigating-between-routes/)


## to retrieve in component :


	this.snapshotPageNo = this.Activatedroute.snapshot.queryParams['pageNum'] || 0;
     
	this.Activatedroute.params
	.subscribe(params => { 
	    this.pageNum = params['pageNum']||0;
	   console.log('Query params ',this.pageNum) 
	});


	this.Activatedroute.queryParams

	this.Activatedroute.fragment


[https://www.tektutorialshub.com/angular/angular-passing-optional-query-parameters-to-route/](https://www.tektutorialshub.com/angular/angular-passing-optional-query-parameters-to-route/)
[https://vsavkin.com/routeur-angular-comprendre-l%C3%A9tat-du-routeur-5e15e729a6df](https://vsavkin.com/routeur-angular-comprendre-l%C3%A9tat-du-routeur-5e15e729a6df)


	this.router.navigate(['/home'], { fragment: 'top' });



## to preserve the query if we click another link in javascript


	this.router.navigate(['/servers',id,'edit'], {queryParamsHandling: 'preserve'});


## lazy loading and preload

	import { NgModule } from '@angular/core';
	import { Routes, RouterModule, PreloadAllModules } from '@angular/router';

	import { ShoppingListComponent } from './shopping-list/shopping-list.component';
	import { HomeComponent } from './core/home/home.component';

	const appRoutes: Routes = [
	  { path: '', component: HomeComponent },
	  { path: 'recipes', loadChildren: './recipes/recipes.module#RecipesModule'},
	  { path: 'shopping-list', component: ShoppingListComponent }
	];

	@NgModule({
	  imports: [
	    RouterModule.forRoot(appRoutes, {preloadingStrategy: PreloadAllModules})
	  ],
	  exports: [RouterModule]
	})
	export class AppRoutingModule {}

#### ----- DON'T NEED TO IMPORT IN APP.MODULE -----

## protect routes
###auth-guard.service.ts

	import { Injectable } from '@angular/core';
	import { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router} from '@angular/router';
	import { Observable } from 'rxjs';
	import { AuthService } from './auth.service';

	@Injectable()
	export class AuthGuard implements CanActivate {


	  constructor(private authService: AuthService, private router: Router) {
	  }

	  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean {

	    return this.authService.isAuthenticated()
		  .then(
		        (authenticated: boolean) => {
		       if(authenticated) {
		           return true;
		        } else {
		           this.router.navigate(['/']);
		        }
		    )
	  }
	}

### auth.service.ts (funzione per fare check sull'accesso)

	export class AuthService {
	    loggedIn = false;
	    
	    isAuthenticated() {
		const promise = new Promise(
		    (resolve,reject) => {
		        setTimeout(() => {
		            resolve(this.loggedIn);
		        },800)
		    }
		);
		
		return promise;
	    }
	    
	    login() {
		this.loggedIn = true;
	    }
	    logout() {
		this.loggeId = false;
	    }
	}

## imports in app-routing.ts
	import { AuthGuard } from './auth-guard.service'; 

	{ path: 'servers', component: ServersComponent ,canActivate: [AuthGuard]}

## imports in app.module.ts
	import { AuthService} from './auth.service';
	import { AuthGuard } from './auth-guard.service';

	providers: [ServersService, AuthService, AuthGuard],



## protect routes to quit

### can-deactivate-guard.service.ts

	import { Observable } from 'rxjs/Observable';

	export interface CanComponentDeactivate {
	    canDeactivate: () => Observable<boolean> | Promise<boolean> | boolean;
	} 

	export class CanDeactivateGuard implements CanDeactivate<CanComponentDeactivate> {
	    canDeactivate(component: CanComponentDeactivate, currentRoute: ActivatedRouteSnaphsot, currentState: RouterStateSnapshot, nextState?: RouterStateSnapshot ): Observable<boolean> | Promise<boolean> | boolean {
		return component.canDeactivate();
	    }
	}


#### in path

	{ path: ':id/edit', component: EditServerComponent, canDeactivate: [CanDeactivateGuard] } 


#### in component 
	canDeactivate() : Observable<boolean> | Promise<boolean> | boolean {
		if (!this.allowEdit) {
		    return true;
		} 

		console.log("is ok to pass " + this.serverName !== this.server.name || this.serverStatus !== this.server.status && !this.changesSaved);

		if(this.serverName !== this.server.name || this.serverStatus !== this.server.status && !this.changesSaved) {
		    return confirm('do you want to discard the changes?');
		} else {
		    return true;
		}
	}
	


[https://scotch.io/courses/routing-angular-2-applications/candeactivate](https://scotch.io/courses/routing-angular-2-applications/candeactivate)


***



# CUSTOM DIRECTIVES

directive to higlight an element with param:


	import {Directive, Renderer2, ElementRef, HostListener, Input} from '@angular/core';

	@Directive({
	  selector: '[appHighlight]'
	})
	export class HighlightDirective {
	 
	  @Input('appHighlight') highlightColor: string;

	  private _defaultColor = 'red';

	  constructor(private _el: ElementRef, private _renderer: Renderer2) {
	    this._renderer.setStyle(this._el.nativeElement, 'color', this._defaultColor);
	  }

	  @HostListener('mouseenter') onMouseEnter() {
	    this._renderer.setStyle(this._el.nativeElement, 'color', this.highlightColor);
	  }

	  @HostListener('mouseleave') onMouseLeave() {
	    this._renderer.setStyle(this._el.nativeElement, 'color', this._defaultColor);
	  }


	}




## in html


		<div [appHighlight]="'yellow'">Texte en highlight</div>


## with @hostBinding


	import { Directive, HostBinding, HostListener } from '@angular/core';

	@Directive({
	  selector: '[appDropdown]'
	})
	export class DropdownDirective {
	  @HostBinding('class.open') isOpen: boolean = false;

	  constructor() { }
	    
	    
	  @HostListener('click') clickElement(EventData: Event) {
		this.isOpen = !this.isOpen;      
	    }
	}


[http://www.learn-angular.fr/les-directives/](http://www.learn-angular.fr/les-directives/)






